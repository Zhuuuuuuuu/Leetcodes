class Solution {
public int maximalRectangle(char[][] matrix) {
    if (matrix.length == 0) {
        return 0;
    }
    int[] heights = new int[matrix[0].length];
    int maxArea = 0;
    for (int row = 0; row < matrix.length; row++) {
        //遍历每一列，更新高度
        for (int col = 0; col < matrix[0].length; col++) {
            if (matrix[row][col] == '1') {
                heights[col] += 1;
            } else {
                heights[col] = 0;
            }
        }
        //调用上一题的解法，更新函数
        maxArea = Math.max(maxArea, largestRectangleArea(heights));
    }
    return maxArea;
}

    public int largestRectangleArea(int[] heights) {
    int maxarea = 0;
    for(int i = 0;i < heights.length; i++){
        int minheight = Integer.MAX_VALUE; //0x7FFFFFF
        for(int j = i;j < heights.length; j++){
            minheight = Math.min(minheight,heights[j]);
            maxarea   = Math.max(maxarea,minheight *(j - i + 1));
        }
    }
    return maxarea;
    }
}
