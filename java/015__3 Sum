class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        
        n=len(nums)
        res=[]
        if(not nums or n<3):
            return []
        nums.sort()
        res=[]
        for i in range(n):
            if(nums[i]>0):
                return res
            if(i>0 and nums[i]==nums[i-1]):
                continue
            L=i+1
            R=n-1
            while(L<R):
                if(nums[i]+nums[L]+nums[R]==0):
                    res.append([nums[i],nums[L],nums[R]])
                    while(L<R and nums[L]==nums[L+1]):
                        L=L+1
                    while(L<R and nums[R]==nums[R-1]):
                        R=R-1
                    L=L+1
                    R=R-1
                elif(nums[i]+nums[L]+nums[R]>0):
                    R=R-1
                else:
                    L=L+1
        return res


class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        ArrayList<List<Integer>> res = new ArrayList<List<Integer>>();
        int n = nums.length;
        int i = 0;
        Arrays.sort(nums);
        while(i < n-2){
            int base = nums[i];
            int left = i+1;
            int right = n - 1;

            while(left < right){
                int sum = base + nums[left]+nums[right];
                if (sum == 0){
                    LinkedList<Integer> list = new LinkedList<Integer>();
                    list.add(base);
                    list.add(nums[left]);
                    list.add(nums[right]);
                    res.add(list);
                    left = moveRight(nums,left + 1);
                    right = moveLeft(nums,right -1);
                }else if(sum > 0){
                    right = moveLeft(nums,right -1);
                }else{
                    left = moveRight(nums,left + 1);
                }
            }
            i = moveRight(nums,i + 1);
        }
        return res;
    }
    public int moveRight(int[] nums,int right){
        while(right == nums.length - 1 || (right >= 0 && nums[right] == nums[right + 1])){
            right --;
        }
        return right;
    }
    public int moveLeft(int[] nums,int left){
        while(left == 0||(left < nums.length && nums[left]==nums[left-1])){
            left ++;
        }
    return left;
    }
}
