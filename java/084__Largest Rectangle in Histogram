Solution 1:暴力解法
用前一对柱子之间的最低高度来求出当前柱子对间的最低高度。

用数学语言来表达，minheight=\min(minheight, heights(j))minheight=min(minheight,heights(j)) ，
其中， heights(j)是第 j 个柱子的高度。

class Solution {
    public int largestRectangleArea(int[] heights) {
        int maxarea = 0;
        for(int i = 0;i < heights.length; i++){
            int minheight = Integer.MAX_VALUE; //0x7FFFFFF
            for(int j = i;j < heights.length; j++){
                minheight = Math.min(minheight,heights[j]);
                maxarea   = Math.max(maxarea,minheight *(j - i + 1));
            }
        }
        return maxarea;
    }
}

时间复杂度：O(n^2)


Solution 2:栈的思想
class Solution {
    public int largestRectangleArea(int[] heights) {
        int res = 0;
        Deque<Integer> stack = new ArrayDeque<>();
        int[] new_heights = new int[heights.length + 2];
        for (int i = 1; i < heights.length + 1; i++) new_heights[i] = heights[i - 1];
        //System.out.println(Arrays.toString(new_heights));
        for (int i = 0; i < new_heights.length; i++) {
            //System.out.println(stack.toString());
            while (!stack.isEmpty() && new_heights[stack.peek()] > new_heights[i]) {
                int cur = stack.pop();
                res = Math.max(res, (i - stack.peek() - 1) * new_heights[cur]);
            }
            stack.push(i);
        }
        return res;  
    }
}
