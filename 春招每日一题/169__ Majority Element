题目描述：
如果数组长度为n，找到一个出现次数超过n/2的数

方法1：哈希表
Java:
class Solution {
    public Map<Integer,Integer> countNums(int[] nums) {
        //哈希map：把出现的数字和对应的次数存入map中
        Map<Integer,Integer> counts = new HashMap<Integer,Integer>();
        for(int num:nums){
            if(!counts.containsKey(num)){
                counts.put(num,1);
            }else{
                counts.put(num,counts.get(num) + 1);
            }
        }
        return counts;
    }


    public int majorityElement(int[] nums){
        //拿到map
        Map<Integer,Integer> counts = countNums(nums);

        //作为返回结果的map
        Map.Entry<Integer,Integer> majorityEntry = null;
        //遍历Map.Entry可以拿到map中的key和value
        for(Map.Entry<Integer,Integer> entry:counts.entrySet()){
            if (majorityEntry == null || entry.getValue() > majorityEntry.getValue()){
                majorityEntry = entry;
            }
        }
        return majorityEntry.getKey();
    }
}

Python:
class Solution:
    def majorityElement(self, nums):
        counts = collections.Counter(nums)
        return max(counts.keys(), key=counts.get)


Solution2: 排序法
Python:
class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        nums.sort()
        return nums[len(nums)/2]
        
Java:
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}
       
