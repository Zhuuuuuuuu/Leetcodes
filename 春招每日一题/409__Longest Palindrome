题目描述： 给定一个字符串，利用其中大小写字母构造一个字符串


思路

回文串是一个正着读和反着读都一样的字符串。以回文中心为分界线，对于回文串中左侧的字符 ch，在右侧对称的位置也会出现同样的字符。例如在字符串 "abba" 中，回文中心是 "ab|ba" 中竖线的位置，而在字符串 "abcba" 中，
回文中心是 "ab(c)ba" 中的字符 "c" 本身。我们可以发现，在一个回文串中，只有最多一个字符出现了奇数次，其余的字符都出现偶数次。
那么我们如何通过给定的字符构造一个回文串呢？我们可以将每个字符使用偶数次，使得它们根据回文中心对称。
在这之后，如果有剩余的字符，我们可以再取出一个，作为回文中心。

算法：
对于每个字符ch来说，假设它出现了v次，我们可以使用该字符v/2*2次，在回文串左侧和右侧分别放v/2个字符ch,其中/为整除，
例如若 "a" 出现了 5 次，那么我们可以使用 "a" 的次数为 4，回文串的左右两侧分别放置 2 个 "a"。

如果有任何一个字符ch出现的次数v为奇数（即 v % 2 == 1），那么可以将这个字符作为回文中心，注意只能有一个字符作为回问的中心。
在代码中，用ans存储回文串的长度，由于在遍历字符时，ans每次会增加v/2*2，因此ans一直都会是偶数、但在发现了第一个出现次数为奇数的字符后，
我们将ans增加1，这样ans变成奇数，再后面发现其他出现奇数次字符的时候，就不改变ans的值

Java Solution:
class Solution {
    public int longestPalindrome(String s) {
        int[] count = new int[128];
        for(char c:s.toCharArray()){
            count[c]++;
        }

        int ans = 0;
        for(int v:count){
            ans += v/2*2;
            if(v%2 == 1 && ans % 2 == 0){
                ans ++;
            }
        }
        return ans;
    }
}

Python Solution:
class Solution:
    def longestPalindrome(self, s: str) -> int:
        ans = 0
        count = collections.Counter(s)
        for v in count.values():
            ans += v // 2 * 2
            if ans % 2 == 0 and v % 2 == 1:
                ans += 1
        return ans
